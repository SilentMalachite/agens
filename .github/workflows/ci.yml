name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Windows は MSVC + PowerShell で安定化（Ninja/MSYS2 依存を排除）
      - name: Configure (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cmake -S . -B build -A x64 -DBUILD_TESTING=ON

      - name: Configure (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: cmake -S . -B build -DBUILD_TESTING=ON -DENABLE_SANITIZERS=ON

      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: cmake --build build --config Release -j

      - name: Build (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: cmake --build build -j

      - name: Test (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ctest --test-dir build -C Release -j2 --output-on-failure

      - name: Test (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: ctest --test-dir build -j2 --output-on-failure

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Install clang-tidy
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tidy
          
      - name: Configure with compile commands
        run: cmake -S . -B build -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        
      - name: Build
        run: cmake --build build -j
        
      - name: Run clang-tidy
        run: |
          find src/ -name "*.cpp" -exec clang-tidy {} -p build \;
